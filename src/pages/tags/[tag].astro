---
export const prerender = true;
import PostItem from '../../components/PostItem.astro';
import BaseLayout from '../../layouts/BaseLayout.astro';
import { Post } from '../../types/Post';

export async function getStaticPaths() {
  const posts = await Promise.all(
    Object.values(import.meta.glob<Post>('../**/*.md', { eager: true }))
  );

  const uniqueTags = [
    ...new Set(
      posts
        .filter((post) => {
          if (!post.frontmatter.tags) {
            console.warn(`Warning: Post "${post.url}" has no tags`);
            return false;
          }
          if (!Array.isArray(post.frontmatter.tags)) {
            console.warn(`Warning: Post "${post.url}" has invalid tags format`);
            return false;
          }
          return true;
        })
        .map((post) => post.frontmatter.tags)
        .flat()
    ),
  ];

  return uniqueTags.map((tag) => {
    const filteredPosts = posts.filter((post) =>
      post.frontmatter.tags ? post.frontmatter.tags.includes(tag) : false
    );
    return {
      params: { tag },
      props: { posts: filteredPosts },
    };
  });
}

const { tag } = Astro.params;
const { posts } = Astro.props;
---

<BaseLayout pageTitle={tag}>
  <div class="mt-10 flex w-full justify-center sm:px-4">
    <div class="container">
      <h1 class="mb-10 mt-6 text-center text-2xl text-black dark:text-white">
        {tag}のタグが付いた記事
      </h1>
      <ul class="grid grid-cols-1 flex-col gap-4 gap-y-2 sm:gap-y-4">
        {
          posts &&
            posts
              .filter((post: Post) => !post.frontmatter.draft)
              .sort((a: Post, b: Post) => {
                return (
                  new Date(b.frontmatter.pubDate).getTime() -
                  new Date(a.frontmatter.pubDate).getTime()
                );
              })
              .map((post: Post) => post.url !== undefined && <PostItem post={post} />)
        }
      </ul>
    </div>
  </div>
</BaseLayout>
